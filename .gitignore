from bokeh.plotting import figure, output_file, show
from bokeh.io import output_notebook, show
from bokeh.models import ColumnDataSource
from bokeh.models.tools import HoverTool
from bokeh.models import SingleIntervalTicker, LinearAxis, Range1d, LabelSet, Label, \
Arrow, NormalHead, OpenHead, VeeHead
output_notebook()

def make_roster_link(team_number, season):
    from sys import exit
    
    URLB = "https://statsapi.web.nhl.com/api/v1/teams/"
 

    if int(team_number) > 33:
        raise ValueError("Wrong Value")

   
    team_number = str(team_number) 
    season = str(season)
    
    
    pattern = re.compile('\d{8}')
    SZNFormat = bool(pattern.match(season))
    if not SZNFormat:
        raise ValueError("Specify start and end")
     
    
    url = URLB + team_number + "/roster/" + "?season=" + season
    return url

def makePlayerStats_link (id, param = ""):
    URLB = "https://statsapi.web.nhl.com/api/v1/people/"
    if param == "":
        url = URLB + id + "/"
    else:
        url = URLB + id + "/stats/?" + param
    return url
def PlayerStats(url):
    One = "stats" 
    response = requests.get(url)
    try:
        content = json.loads(response.content)[One][0]['splits'][0]
    except:
        content = {}
    return content


def jsonfile(y):
    out = {}

    def reduce(x, name=''):
        if type(x) is dict:
            for a in x:
                reduce(x[a], name + a + '_')
        elif type(x) is list:
            i = 0
            for a in x:
                reduce(a, name + str(i) + '_')
                i += 1
        else:
            out[name[:-1]] = x

    reduce(y)
    return out

import time

def TeamStats(start, stop):
    URLB = "https://statsapi.web.nhl.com/api/v1/teams/?teamId=3&expand=team.stats&season="
    start = int(start)
    stop = int(stop)
    
    stats = []
    
    while start != stop:
        url = URLB + str(start) + str(start + 1)
        response = requests.get(url)
        content = response.json()['teams']
        try:
            team_stats = [team_dict['teamStats'][0] for team_dict in content][0]['splits'][0]
            if type(team_stats) is dict:
                team_stats.update({"season_start":start, "season_stop" : start + 1})
                stats.append(team_stats)
            else:
                for item in team_stats:
                    item.update({"season_start":start, "season_stop" : start + 1})
        except:
            pass
        time.sleep(1)
        start += 1
        print(str(start) + " season complete")
    
   
    df_stats = pd.json_normalize(stats, sep = "_")
    return df_stats
p = figure(plot_width=400, plot_height=400, 
           x_axis_type=None, title = "Islanders Points by Season")

source = ColumnDataSource(islandersdf)

p.line(x = "season_stop", y = "stat_pts", source = source, line_width = 2, 
       legend_label = "Points")
p.line(x = "season_stop", y = "stat_gamesPlayed", source = source, line_color = "grey",
      line_width = 4, line_dash = "dashed",
      legend_label = "Games Played")
p.yaxis.minor_tick_line_color = None


labels = Label(x = 1995, y = 20, text = "Lockout", level = "overlay")
p.add_layout(Arrow(end=NormalHead(line_color="black", line_width=1),
                   x_start=2005, y_start=25, x_end=1995, y_end=45))
p.add_layout(Arrow(end=NormalHead(line_color="black", line_width=1),
                   x_start=2005, y_start=25, x_end=2013, y_end=45))
p.add_layout(labels)

hover = HoverTool()
hover.tooltips=[
    ("Year","@season_stop"),
    ('Points', "@stat_pts"),
    ('Games Played', '@stat_gamesPlayed')

]

ticker = SingleIntervalTicker(interval=10)
xaxis = LinearAxis(ticker=ticker)
p.add_layout(xaxis, 'below')

p.add_tools(hover)


p.legend.location = "top_left"
p.legend.title_text_font_style = "bold"
p.legend.title_text_font_size = "20px"
p.legend.background_fill_alpha = 0
p.legend.border_line_alpha = 0
p.legend.margin = -1

show(p)
p = figure(plot_width=400, plot_height=400, 
           x_axis_type=None, title = "Islanders Points by Season")


p.line(x = "season_stop", y = "stat_wins", source = source, line_color = "firebrick",
      line_width = 4, line_dash = "dashed")
p.yaxis.minor_tick_line_color = None


p.extra_y_ranges = {"percent": Range1d(start=0, end=1)}


p.add_layout(LinearAxis(y_range_name="percent"), 'right')

p.line(x = "season_stop", y = "stat_winScoreFirst", source = source, 
       line_width = 2, line_color = "green",
      y_range_name = "percent")

hover = HoverTool()
hover.tooltips=[
    ("Year","@season_stop"),
    ('% Win Score First', "@stat_winScoreFirst"),
    ('Wins', '@stat_wins')

]

ticker = SingleIntervalTicker(interval=10)
xaxis = LinearAxis(ticker=ticker)
p.add_layout(xaxis, 'below')

p.add_tools(hover)

show(p)

